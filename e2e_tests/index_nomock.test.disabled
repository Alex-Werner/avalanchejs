import { getAvalanche, createTests, Matcher } from "./e2etestlib"
import { IndexAPI } from "../src/apis/index/api"
import { KeystoreAPI } from "../src/apis/keystore/api"
import { Avalanche } from "../src"
import { AVMAPI } from "../src/apis/avm/api"

describe("Index", () => {
  let tx = { value: "" }
  let addrB = { value: "" }

  const avalanche: Avalanche = getAvalanche()

  const Index: IndexAPI = avalanche.Index()

  const encoding: string = "hex"
  const baseurl: string = "/ext/index/X/tx"
  const cContainerID: string =
    "2ceDnmxh59AsXqTG95vf3dr2a7ohXprNn9mvWgQJ39uHryBecT"

  const containerID: string =
    "2ceDnmxh59AsXqTG95vf3dr2a7ohXprNn9mvWgQJ39uHryBecT"

  // test_name          response_promise               resp_fn                 matcher           expected_value/obtained_value
  const tests_spec: any = [
    [
      "getXLastAccepted",
      async () => {
        await Index.getLastAccepted(encoding, baseurl)
      },
      (x) => x,
      Matcher.toThrow,
      () => "no containers have been accepted"
    ],

    [
      "getXContainerByIndex",
      async () => {
        await Index.getContainerByIndex("0", encoding, "/ext/index/X/tx")
      },
      (x) => x,
      Matcher.toThrow,
      () => "no container at index 0"
    ],
    [
      "getXContainerRange",
      async () => {
        await Index.getContainerRange(0, 100, encoding, "/ext/index/X/tx")
      },
      (x) => x,
      Matcher.toThrow,
      () => "no containers have been accepted"
    ],
    [
      "getXIndex",
      async () => {
        Index.getIndex(cContainerID, encoding, "ext/index/X/tx")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getXisAccepted",
      async () => {
        Index.isAccepted(
          "6fXf5hncR8LXvwtM8iezFQBpK5cubV6y1dWgpJCcNyzGB1EzY",
          encoding,
          "ext/index/X/tx"
        )
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getXVerticeLastAccepted",
      async () => {
        await Index.getLastAccepted(encoding, "/ext/index/X/vtx")
      },
      (x) => x,
      Matcher.toEqual,
      () => "not found"
    ],
    [
      "getXVerticeContainerByIndex",
      async () => {
        await Index.getContainerByIndex("0", encoding, "/ext/index/X/vtx")
      },
      (x) => x,
      Matcher.toEqual,
      () => "no container at index 0"
    ],
    [
      "getXVerticeContainerRange",
      async () => {
        await Index.getContainerRange(0, 100, encoding, "/ext/index/X/vtx")
      },
      (x) => x,
      Matcher.toThrow,
      () => "no containers have been accepted"
    ],
    [
      "getXVerticeIndex",
      async () => {
        Index.getIndex(cContainerID, encoding, "ext/index/X/vtx")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getXVerticeisAccepted",
      async () => {
        Index.isAccepted(cContainerID, encoding, "ext/index/X/vtx")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getCLastAccepted",
      async () => {
        await Index.getLastAccepted(encoding, "/ext/index/C/block")
      },
      (x) => x,
      Matcher.toEqual,
      () => "not found"
    ],

    [
      "getCContainerByIndex",
      async () => {
        await Index.getContainerByIndex("0", encoding, "/ext/index/C/block")
      },
      (x) => x,
      Matcher.toEqual,
      () => undefined
    ],
    [
      "getCContainerRange",
      async () => {
        await Index.getContainerRange(0, 100, encoding, "/ext/index/C/block")
      },
      (x) => x,
      Matcher.toThrow,
      () => undefined
    ],
    [
      "getCIndex",
      async () => {
        Index.getIndex(cContainerID, encoding, "ext/index/C/block")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getCisAccepted",
      async () => {
        Index.isAccepted(cContainerID, encoding, "ext/index/C/block")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getPLastAccepted",
      async () => {
        await Index.getLastAccepted(encoding, "/ext/index/P/block")
      },
      (x) => x,
      Matcher.toBe,
      () => "not found"
    ],

    [
      "getPContainerByIndex",
      async () => {
        await Index.getContainerByIndex("0", encoding, "/ext/index/P/block")
      },
      (x) => x,
      Matcher.toThrow,
      () => "no containers have been accepted"
    ],
    [
      "getPContainerRange",
      async () => {
        await Index.getContainerRange(0, 100, encoding, "/ext/index/P/block")
      },
      (x) => x,
      Matcher.toThrow,
      () => "no containers have been accepted"
    ],
    [
      "getPIndex",
      async () => {
        Index.getIndex(cContainerID, encoding, "ext/index/P/block")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ],
    [
      "getPisAccepted",
      async () => {
        Index.isAccepted(cContainerID, encoding, "ext/index/P/block")
      },
      (x) => x,
      Matcher.toBe,
      () => undefined
    ]
  ]

  createTests(tests_spec)
})
